import asyncio
import subprocess
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from config import *
from database import fetch_data, read_to_db_user_id, check_users_vpn_service, write_password, is_user_in_db
import hashlib
import random
import string


async def check_users_periodically():
    while True:
        await asyncio.sleep(10)
        await check_users_vpn_service()


main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
my_vpn_button = KeyboardButton(text='üîê –ú–æ–π VPN')
tarif_button = KeyboardButton(text='üí∏ –¢–∞—Ä–∏—Ñ—ã')
support_button = KeyboardButton(text='ü§Ø –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
instrukt_button = KeyboardButton(text='üéØ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN')
main_menu.add(my_vpn_button, tarif_button, support_button)
main_menu.add(instrukt_button)


pre_pay_keyboard_tro = InlineKeyboardMarkup(row_width=1)  # –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ row_width
connect_pay_button1 = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∞', callback_data='pre_pay_tro')
connect_pay_button2 = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
pre_pay_keyboard_tro.add(connect_pay_button1,connect_pay_button2)

pre_pay_keyboard_wir = InlineKeyboardMarkup(row_width=1)  # –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ row_width
connect_pay_button3 = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∞', callback_data='pre_pay_wir')
pre_pay_keyboard_wir.add(connect_pay_button3,connect_pay_button2)


connect_vpn = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='üíµ –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN ‚òïMicro: 50 GB', callback_data="joy_trojan")],
        [InlineKeyboardButton(text='‚è≥ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ: 2 GB', callback_data='trial_tariff')],
        [InlineKeyboardButton(text='üí∞ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª WireGuard', callback_data='joy_wireguard')]
    ]
)

extend_vpn = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='üíµ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ—Å—è—Ü –∏ 50GB: 100—Ä', callback_data="pre_pay_tro")]
    ]
)

instrukt_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='‚öô –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN', callback_data="instrukt")],
        [InlineKeyboardButton(text='üí∏ –ü—Ä–æ–¥–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ / —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª', callback_data="extend_tariff")]
    ]
)


def generate_password(length=15):
    characters = string.ascii_letters + string.digits  # –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    password = ''.join(random.choice(characters) for i in range(length))
    return password


async def delayed_task(chat_id):
    await asyncio.sleep(600)
    try:
        await bot.send_message(chat_id=chat_id,
                               text='–µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º,\n'
                                    '–Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @f_o_x_y_s\n\n'
                                    '–¢–∞–∫ –∂–µ –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –º–æ–∂–Ω–æ \n'
                                    '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å <a href="https://24perep.ru/news/">–Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ</a>'
                               )
    except Exception as e:
        print(e)


async def send_quota(user_id, quota, pay_id=None):
    user = f"{user_id}rac"

    password_hash = generate_password(15)
    fullhash = hashlib.sha224(password_hash.encode('utf-8')).hexdigest()

    await fetch_data(
        "INSERT INTO users (username, password, quota) VALUES ('{}', '{}', '{}')".format(user,
                                                                                         fullhash,
                                                                                         quota))
    url = f"trojan://{password_hash}@24perep.ru:8888?security=tls&sni=24perep.ru&alpn=http%2F1." \
          f"1%2Ch2%2Ch3&fp=firefox&type=tcp&headerType=none#{user}"
    # if not await is_user_in_db(table_name='trojan_users', user_id=user_id):
    await write_password(password_hash, user_id)
    # else:

    if pay_id:
        await bot.send_message(chat_id=user_id, text=f'–ü–ª–∞—Ç–µ–∂–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä\n'
                                                     f'{pay_id}')
    # await bot.send_message(chat_id=msg.chat.id, text='–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞, –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–µ–µ —á—Ç–æ –±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å')
    # await bot.send_message(chat_id=msg.chat.id, text=f'<code>{url}</code>', reply_markup=main_menu)

    await bot.send_photo(chat_id=user_id,
                         photo=f'https://api.qrserver.com/v1/create-qr-code/?size=800x800&data={url}',
                         caption=f'–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ —á—Ç–æ –±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:\n\n'
                                 '‚ö†Ô∏è–≠—Ç–æ –≤–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞, –Ω–µ –¥–∞–≤–∞–π—Ç–µ –µ–µ –Ω–∏–∫–æ–º—É, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è'
                                 ' —Å–≤–æ–∏–º —Ç—Ä–∞—Ñ–∏–∫–æ–º.\n\n'
                                 '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è <b>–Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç QR-–∫–æ–¥ –Ω–∞ '
                                 '—Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ</b>. –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –∏ QR-–∫–æ–¥ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ '
                                 '–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –ö–∞–∂–¥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤–∞—Ç—å –≤–∞—à —Ç—Ä–∞—Ñ–∏–∫.')
    await bot.send_message(chat_id=user_id, text=f'<code>{url}</code>', reply_markup=main_menu)

    asyncio.create_task(delayed_task(chat_id=user_id))


async def send_message_mi(user, text, name=None):
    if name:
        await bot.send_message(chat_id='1348491834', text=f"{text}: @{name} {user}")
    else:
        await bot.send_message(chat_id='1348491834', text=f"{text} {user}")


async def add_wireguard_user(user_id):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏
        command = 'pivpn add'

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        process = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        process.communicate(input=f'vpn{user_id}\n'.encode())

        if process.returncode == 0:
            await bot.send_message(chat_id='1348491834',text="—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            await bot.send_message(chat_id='1348491834',text=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except subprocess.CalledProcessError as e:
        await bot.send_message(chat_id="1348491834", text=f"–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ: {e}")
        return False


async def send_conf(user_id):
    with open(f'/home/vpn/configs/vpn{str(user_id)}.conf', 'rb') as file:
        await bot.send_document(chat_id=user_id, document=file, caption="–í–∞—à config", reply_markup=main_menu)


async def send_to_all_users(text):
    users = await read_to_db_user_id()
    for user_id in users:
        try:
            await bot.send_message(chat_id=user_id, text=text)
            await asyncio.sleep(2)
        except Exception as e:
            print(f'{e}-{user_id}')
            continue


async def send_video_from_file(chat_id):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤–∏–¥–µ–æ
    with open('video/instr.mp4', 'rb') as video_file:
        await bot.send_video(chat_id=chat_id, video=video_file, caption='–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN WireGuard',
                             reply_markup=main_menu)


async def check_args(args, user_id: int):
    if args.isnumeric():
        if int(args) == user_id:
            args = '0'
            return args

        elif await is_user_in_db('trojan_users', args) or await is_user_in_db('users', args):
            return args
    else:
        args = '0'
        return args
