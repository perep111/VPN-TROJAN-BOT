import asyncio
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from config import *
from database import read_to_db_user_id, check_users_vpn_service, is_user_in_db
from database import check_notifications
from marzban import backend

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_users_periodically():
    while True:
        await asyncio.sleep(60)
        await check_users_vpn_service()


main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
my_vpn_button = KeyboardButton(text='üîê –ú–æ–π VPN')
tarif_button = KeyboardButton(text='üí∏ –¢–∞—Ä–∏—Ñ—ã')
support_button = KeyboardButton(text='ü§Ø –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
instrukt_button = KeyboardButton(text='üéØ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN')
ref_button = KeyboardButton(text="üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
main_menu.add(my_vpn_button, tarif_button, support_button)
main_menu.add(instrukt_button, ref_button)


# –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ row_width
pre_pay_keyboard_tro = InlineKeyboardMarkup(row_width=1)
connect_pay_button1 = InlineKeyboardButton(
    text='–û–ø–ª–∞—Ç–∞', callback_data='pre_pay_tro')
connect_pay_button2 = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
pre_pay_keyboard_tro.add(connect_pay_button1, connect_pay_button2)

# –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ row_width
pre_pay_keyboard_wir = InlineKeyboardMarkup(row_width=1)
connect_pay_button3 = InlineKeyboardButton(
    text='–û–ø–ª–∞—Ç–∞', callback_data='pre_pay_wir')
pre_pay_keyboard_wir.add(connect_pay_button3, connect_pay_button2)


connect_vpn = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='ü©∏ –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN:',
                              callback_data="joy_trojan")],
        [InlineKeyboardButton(text='‚è≥ –ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ:',
                              callback_data='trial_tariff')],
    ]
)

extend_vpn = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(
            text='üíµ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ—Å—è—Ü 110—Ä', callback_data="pre_pay_tro")]
    ]
)

instrukt_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(
            text='‚öô –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN', callback_data="instrukt")],
        [InlineKeyboardButton(
            text='üí∏ –ü—Ä–æ–¥–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ / —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª', callback_data="extend_tariff")]
    ]
)

device_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='Apple iPhone/iPad',
                              callback_data="Apple")],
        [InlineKeyboardButton(text='Android', callback_data="Android")]
    ]
)


async def delayed_task(chat_id):
    await asyncio.sleep(600)
    try:
        await bot.send_message(chat_id=chat_id,
                               text='–µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º,\n'
                                    '–Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @f_o_x_y_s'
                               )
    except Exception as e:
        print(e)


async def send_message_link(user, link):

    await bot.send_message(chat_id=user,
                           text=f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n'
                           f'{link}\n\n'
                           f'–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ,'
                           f'–≤—ã —É–≤–∏–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º —Ç–∞—Ä–∏—Ñ–µ –∏ —Å–ø–æ—Å–æ–±–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')


async def send_message_mi(user, text, name=None):
    if name:
        await bot.send_message(chat_id='1348491834', text=f"{text}: @{name} {user}")
    else:
        await bot.send_message(chat_id='1348491834', text=f"{text} {user}")



async def send_conf(user_id):
    with open(f'/etc/wireguard/configs/vpn{str(user_id)}.conf', 'rb') as file:
        await bot.send_document(chat_id=user_id, document=file, caption="–í–∞—à config", reply_markup=main_menu)


# Python
@dp.async_task
async def send_to_all_users(text, video_id=None, photo_id=None):
    users = await read_to_db_user_id()
    for user_id in users:
        try:
            if video_id:
                await bot.send_video(chat_id=user_id, video=video_id, caption=text, reply_markup=main_menu)
            elif photo_id:
                await bot.send_photo(chat_id=user_id, photo=photo_id, caption=text, reply_markup=main_menu)
            else:
                await bot.send_message(chat_id=user_id,
                                       text=text,
                                       reply_markup=main_menu)
            await asyncio.sleep(1)
        except Exception as e:
            await bot.send_message(chat_id='1348491834', text=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {user_id} - {e}")
            continue


async def send_video_from_file(chat_id, video, caption):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤–∏–¥–µ–æ
    with open(video, 'rb') as video_file:
        await bot.send_video(chat_id=chat_id, video=video_file, caption=caption,
                             reply_markup=main_menu)


async def check_args(args, user_id: int):
    if args.isnumeric():
        if int(args) == user_id:
            args = '0'
            return args

        elif await is_user_in_db('trojan_users', args) or await is_user_in_db('users', args):
            return args
    else:
        args = '0'
        return args


async def send_notifications():
    while True:
        users_trojan = await check_notifications('trojan_users')
        users_wireguard = await check_notifications('users')
        try:

            for user in users_trojan:
                await bot.send_message(chat_id=user,
                                       text='‚ùóÔ∏è–ó–ê–í–¢–†–ê –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤–∞—à —Ç–∞—Ä–∏—Ñ\n\n'
                                            'üåü –ü—Ä–æ–¥–ª–µ–≤–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞—Ä–∞–Ω–µ–µ, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –î–û–ë–ê–í–Ø–¢–°–Ø,'
                                            ' –Ω–µ —Å–≥–æ—Ä—è—Ç!\n\n'
                                            '<b>–ù–µ —Ö–æ—á–µ—à—å –ø–ª–∞—Ç–∏—Ç—å?\n'
                                            '–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 2 –Ω–µ–¥–µ–ª–∏ VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> '
                                            '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É',
                                       reply_markup=connect_vpn)

            for user in users_wireguard:
                await bot.send_message(chat_id=user,
                                       text='‚ùóÔ∏è–ó–ê–í–¢–†–ê –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤–∞—à —Ç–∞—Ä–∏—Ñ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ WireGuard\n\n'
                                            'üåü –ë–æ–ª—å—à–µ –æ–ø–ª–ø—Ç–∏—Ç—å –µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è\n\n'
                                            'üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª VLESS, –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ '
                                            '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n\n'
                                            '<b>–ù–µ —Ö–æ—á–µ—à—å –ø–ª–∞—Ç–∏—Ç—å?\n'
                                            '–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 2 –Ω–µ–¥–µ–ª–∏ VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> '
                                            '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É',
                                       reply_markup=connect_vpn)
        except Exception as e:
            print(e)

        await asyncio.sleep(60)
