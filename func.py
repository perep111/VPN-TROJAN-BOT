import asyncio
import os
import random
import string
import yookassa
from yookassa import Payment
import uuid
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from config import *
from database import read_to_db_user_id, check_users_vpn_service, is_user_in_db
from database import check_notifications
from marzban import backend
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

yookassa.Configuration.secret_key = os.getenv('SECRET_KEY')
yookassa.Configuration.account_id = os.getenv('ACCOUNT_ID')


def generate_random_email():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
    # –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
    domain = "mail.ru"
    # –°–æ–±–∏—Ä–∞–µ–º email
    return f"{username}@{domain}"


def recept():
    receipt = {
        "items": [
            {
                "description": "–ü–æ–∫—É–ø–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                "quantity": "1",
                "amount": {"value": "150.00", "currency": "RUB"},
                "vat_code": 1
            }
        ],
         "customer": {"email": generate_random_email()}
    }

    return receipt


def create_payment(user_id, user_name="–ë–µ–∑ –∏–º–µ–Ω–∏"):
    id_key = str(uuid.uuid4())
    payment = Payment.create({
        "amount": {
            "value": "150.00",
            "currency": "RUB"
        },
        "receipt": recept(),
        "payment_method_data": {
            "type": "bank_card"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/free_VIP_VPN_bot"
        },
        "capture": True,
        "metadata": {
            "user_id": user_id,
            "user_name": user_name,
        },
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ..."
    }, id_key)

    
    return payment.confirmation.confirmation_url

async def check_users_periodically():
    while True:
        await asyncio.sleep(60)
        await check_users_vpn_service()


main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
my_vpn_button = KeyboardButton(text='üîê –ú–æ–π VPN')
tarif_button = KeyboardButton(text='üí∏ –¢–∞—Ä–∏—Ñ—ã')
support_button = KeyboardButton(text='ü§Ø –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
instrukt_button = KeyboardButton(text='üéØ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN')
ref_button = KeyboardButton(text="üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
main_menu.add(my_vpn_button, tarif_button, support_button)
main_menu.add(instrukt_button, ref_button)


connect_vpn = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='ü©∏ –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN:',
                              callback_data="joy_trojan")],
        [InlineKeyboardButton(text='‚è≥ –ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ:',
                              callback_data='trial_tariff')],
    ]
)


instrukt_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(
            text='‚öô –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN', callback_data="instrukt")],
        [InlineKeyboardButton(
            text='üí∏ –ü—Ä–æ–¥–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ / —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª', callback_data="extend_tariff")]
    ]
)

device_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='Apple iPhone/iPad',
                              callback_data="Apple")],
        [InlineKeyboardButton(text='Android', callback_data="Android")]
    ]
)

def pay_inlane(chat_id, user_name=None):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∞:',
                                url=create_payment(chat_id, user_name=user_name))],
            [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã', callback_data="back")]
        ]
    )
    return kb

async def delayed_task(chat_id):
    await asyncio.sleep(600)
    try:
        await bot.send_message(chat_id=chat_id,
                               text='–µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º,\n'
                                    '–Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @f_o_x_y_s'
                               )
    except Exception as e:
        logger.warning(f'–û—à–∏–±–∫–∞ delayed_task : {e}')
        await bot.send_message(chat_id='1348491834', text=f'–û—à–∏–±–∫–∞ delayed_task : {e}')


async def send_message_link(user, link):

    await bot.send_message(chat_id=user,
                           text=f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n'
                           f'{link}\n\n'
                           f'–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ,'
                           f'–≤—ã —É–≤–∏–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º —Ç–∞—Ä–∏—Ñ–µ –∏ —Å–ø–æ—Å–æ–±–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n'
                           f'–∏–ª–∏ –∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')


async def send_message_mi(user, text, name=None):
    if name:
        await bot.send_message(chat_id='1348491834', text=f"{text}: @{name} {user}")
    else:
        await bot.send_message(chat_id='1348491834', text=f"{text} {user}")


async def send_conf(user_id):
    with open(f'/etc/wireguard/configs/vpn{str(user_id)}.conf', 'rb') as file:
        await bot.send_document(chat_id=user_id, document=file, caption="–í–∞—à config", reply_markup=main_menu)


# Python
@dp.async_task
async def send_to_all_users(text, video_id=None, photo_id=None):
    users = await read_to_db_user_id()

    count_err = 0
    count_mess = 0

    for user_id in users:

        try:
            if video_id:
                await bot.send_video(chat_id=user_id, video=video_id, caption=text, reply_markup=main_menu)
            elif photo_id:
                await bot.send_photo(chat_id=user_id, photo=photo_id, caption=text, reply_markup=main_menu)
            else:
                await bot.send_message(chat_id=user_id,
                                       text=text,
                                       reply_markup=main_menu)
            await asyncio.sleep(1)
            count_mess += 1

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {user_id} - {e}')
            count_err += 1
            continue

    await bot.send_message(chat_id='1348491834', text=f"–°–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {count_mess}\n\n–û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {count_err}")


async def send_video_from_file(chat_id, video, caption):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤–∏–¥–µ–æ
    with open(video, 'rb') as video_file:
        await bot.send_video(chat_id=chat_id, video=video_file, caption=caption,
                             reply_markup=main_menu)


async def check_args(args, user_id: int):
    if args.isnumeric():
        if int(args) == user_id:
            args = '0'
            return args

        elif await is_user_in_db('trojan_users', args) or await is_user_in_db('users', args):
            return args
    else:
        args = '0'
        return args


async def send_notifications():
    while True:
        users_trojan = await check_notifications('trojan_users')
        try:

            for user in users_trojan:
                await bot.send_message(chat_id=user,
                                       text='‚ùóÔ∏è–ó–ê–í–¢–†–ê –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤–∞—à —Ç–∞—Ä–∏—Ñ\n\n'
                                            'üåü –ü—Ä–æ–¥–ª–µ–≤–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞—Ä–∞–Ω–µ–µ, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –î–û–ë–ê–í–Ø–¢–°–Ø,'
                                            ' –Ω–µ —Å–≥–æ—Ä—è—Ç!\n\n'
                                            '<b>–ù–µ —Ö–æ—á–µ—à—å –ø–ª–∞—Ç–∏—Ç—å?\n'
                                            '–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 2 –Ω–µ–¥–µ–ª–∏ VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> '
                                            '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É',
                                       reply_markup=connect_vpn)

        except Exception as e:
            print(e)

        await asyncio.sleep(60)
