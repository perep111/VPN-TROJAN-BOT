import hashlib
import logging
import asyncio
from aiogram.utils.exceptions import NetworkError, RetryAfter
from config import dp, bot
from func import main_menu, connect_vpn, generate_password, instrukt_kb, pay_conf, recept
from func import pre_pay_keyboard, delayed_task
from aiogram import types
from aiogram.types import Message, ContentType
from database import fetch_data


admin = [1348491834]


@dp.errors_handler()
async def error_handler(update, exception):
    if isinstance(exception, NetworkError):
        logging.error(f"NetworkError: {exception}")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        return True  # –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    elif isinstance(exception, RetryAfter):
        await asyncio.sleep(exception.timeout)
        return True  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    else:
        print(f'—Ö–∑ —á–µ –∑–∞ –æ—à–∏–±–∫–∞...{exception}')
        return True


@dp.message_handler(commands=['start'])
async def process_start_command(msg: Message):
    await msg.answer(' @free_VIP_VPN_bot —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ! –î–∞–∂–µ —Ç–∞–º, –≥–¥–µ VPN –±–ª–æ–∫–∏—Ä—É—é—Ç.'
                     ' –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª Trojan,'
                     ' –∫–æ—Ç–æ—Ä—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –º–∞—Å–∫–∏—Ä—É–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–¥ –æ–±—ã—á–Ω—ã–π, –∏ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é'
                     ' –æ–±—Ö–æ–¥–∏—Ç –ª—é–±—ã–µ —Å–∏—Å—Ç–µ–º—ã –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞.')
    await msg.answer_sticker(sticker='CAACAgIAAxkBAAEBgo9lL7p4rfT_TOJ25HtBsN-EtQ22YQACTQADWbv8JSiBoG3dG4L3MAQ')
    await msg.answer('–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –ª—É—á—à–∏–π –≤ –º–∏—Ä–µ VPN!', reply_markup=main_menu)


@dp.message_handler(text='üí∏ –¢–∞—Ä–∏—Ñ—ã')
async def mess_replay(msg: Message):
    await msg.answer('–¢–∞—Ä–∏—Ñ –ø–æ–∫–∞ –æ–¥–∏–Ω: 100—Ä 50GB\n\n'
                     '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                     '–í—ã –ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç—Ä–∞—Ñ–∏–∫', reply_markup=connect_vpn)


@dp.message_handler(text='ü§Ø –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def mess_replay(msg: Message):
    await msg.answer('–µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π,\n'
                     '–Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º @f_o_x_y_s,\n'
                     '—Ç–∞–∫ –∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–∞ '
                     '<a href="https://24perep.ru/news/">—ç—Ç–æ–º —Å–∞–π—Ç–µ</a>')


@dp.message_handler(text='üîê –ú–æ–π VPN')
async def get_data(msg: Message):
    user = f"{msg.from_user.id}rac"
    data = await fetch_data("SELECT * FROM users WHERE username = '{}'".format(user,))

    # –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —á–∞—Ç
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ result –Ω–µ –ø—É—Å—Ç–æ–π
    if data:
        quota = data[0]['quota']
        download_value = data[0]['download']
        upload_value = data[0]['upload']
        a = round(((quota - (download_value + upload_value)) / 1073741824), 2)

        await msg.answer(f'üåü –í–∞—à —Ç–∞—Ä–∏—Ñ ‚òïÔ∏è Micro: 50 GB\n\n'
                         f'üöÄ –æ—Å—Ç–∞—Ç–æ–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ = {a}GB\n\n'
                         f'‚Ñπ –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –Ω–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤,'
                         f' –≤—Å–µ –æ–Ω–∏ –±—É–¥—É—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤–∞—Ç—å –≤–∞—à —Ç—Ä–∞—Ñ–∏–∫.\n\n'
                         f'–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç—Ä–∞—Ñ–∏–∫: ', reply_markup=instrukt_kb)

    else:
        await msg.answer('üëâ –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.'
                         ' –í—ã –ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç—Ä–∞—Ñ–∏–∫\n\n'
                         '‚òï 50 GB - –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∏—Ç—å –¥–ª—è 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö',
                         reply_markup=connect_vpn)


@dp.callback_query_handler(text="Extend_tariff")
async def extend_tariff(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(chat_id=call.from_user.id,
                           text='–¢–∞—Ä–∏—Ñ –ø–æ–∫–∞ –æ–¥–∏–Ω: 100—Ä 50GB\n\n'
                                '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                                '–í—ã –ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç—Ä–∞—Ñ–∏–∫',
                           reply_markup=connect_vpn)


@dp.callback_query_handler(text="cancellation")
async def cancellation(call: types.CallbackQuery):
    await call.answer()


@dp.callback_query_handler(text="pay")
async def pay_message(call: types.CallbackQuery):
    await call.answer()
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text='‚òï Micro: 50 GB / 1 –º–µ—Å—è—Ü\n\n'
                                     '–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–∞ –ú–ï–°–Ø–¶:\n'
                                     'üëâ 100 —Ä—É–±–ª–µ–π\n'
                                     '‚Ñπ 3.5 —Ä—É–±. –≤ –¥–µ–Ω—å\n\n'
                                     '‚ö†Ô∏è–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ '
                                     '–±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –Ω–µ–∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞\n\n'
                                     '–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:',
                                reply_markup=pre_pay_keyboard)


@dp.callback_query_handler(lambda c: c.data == 'back')
async def push_cancel(call: types.CallbackQuery):
    await call.answer()
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text='–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å, –º–Ω–µ <b>–æ—á–µ–Ω—å –∂–∞–ª—å</b>')


@dp.callback_query_handler(text='pre_pay')
async def menu_message(call: types.CallbackQuery):
    await call.answer()
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text='üëáüèª')

    await pay_conf(call.message.chat.id)


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)
    # await bot.send_message(chat_id=query.from_user.id, text='11')
    print('–ø–æ–∫—É–ø–∫–≤–∞')


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
    if message.successful_payment.invoice_payload == 'payment':
        await bot.send_message(message.from_user.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π')
        name = message.from_user.username
        user_id = message.from_user.id
        user = f"{message.from_user.id}rac"
        quota = '53687091200'

        data = await fetch_data("SELECT * FROM users WHERE username = '{}'".format(user, ))

        if not data:

            password_hash = generate_password(15)
            fullhash = hashlib.sha224(password_hash.encode('utf-8')).hexdigest()

            await fetch_data(
                "INSERT INTO users (username, password, quota) VALUES ('{}', '{}', '{}')".format(user,
                                                                                                 fullhash,
                                                                                                 quota))
            url = f"trojan://{password_hash}@24perep.ru:8888?security=tls&sni=24perep.ru&alpn=http%2F1.1%2Ch2%2Ch3&fp=chrome&type=tcp&headerType=none#{user}"

            await bot.send_message(chat_id=message.chat.id, text='–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞')
            await bot.send_message(chat_id=message.chat.id, text=url, reply_markup=main_menu)
            if name:
                await bot.send_message(chat_id='1348491834',text=f"–Ω–æ–≤—ã–π —é–∑–µ—Ä: @{name} –¥–æ–±–∞–≤–ª–µ–Ω {user}")
            else:
                await bot.send_message(chat_id='1348491834', text=f"–Ω–æ–≤—ã–π {user}")

            asyncio.create_task(delayed_task(user_id))

        else:

            await fetch_data(
                "UPDATE users SET quota = quota + {} WHERE username = '{}'".format(quota, user))
            await bot.send_message(chat_id=message.chat.id,
                                   text='–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ –µ—â–µ 50GB –Ω–∞–∂–º–∏—Ç–µ –ú–æ–π VPN, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Å–≤–æ–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞',
                                   reply_markup=main_menu)

            if name:
                await bot.send_message(chat_id='1348491834', text=f"–∏–º—è: @{name} –¥–æ–±–∞–≤–∏–ª 50GB {user}")
            else:
                await bot.send_message(chat_id='1348491834', text=f"–¥–æ–±–∞–≤–∏–ª 50GB {user}")

