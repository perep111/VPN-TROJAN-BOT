import psutil
import math
import time
from database import how_users_in_db
# import speedtest


# async def get_speed():
#     st = speedtest.Speedtest()
#     download_speed = st.download()
#     upload_speed = st.upload()
#
#     return download_speed, upload_speed


def readable_size(size_bytes):
    if size_bytes == 0:
        return "0 B"
    size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return f'{s} {size_name[i]}'


async def get_system_info():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º psutil –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
    cpu_cores = psutil.cpu_count(logical=False)
    cpu_percent = psutil.cpu_percent(interval=1)

    # –ó–∞–º–µ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
    start_time = time.time()
    start_down_bandwidth = psutil.net_io_counters().bytes_recv
    start_up_bandwidth = psutil.net_io_counters().bytes_sent

    # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥–∞)
    time.sleep(1)

    # –ó–∞–º–µ—Ä –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
    end_time = time.time()
    end_down_bandwidth = psutil.net_io_counters().bytes_recv
    end_up_bandwidth = psutil.net_io_counters().bytes_sent

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–¥–∞—á–∏
    down_speed = (end_down_bandwidth - start_down_bandwidth) / (end_time - start_time)
    up_speed = (end_up_bandwidth - start_up_bandwidth) / (end_time - start_time)

    total_memory = readable_size(psutil.virtual_memory().total)
    used_memory = readable_size(psutil.virtual_memory().used)
    free_memory = readable_size(psutil.virtual_memory().available)

    network = psutil.net_io_counters()
    down_bandwidth = network.bytes_recv
    up_bandwidth = network.bytes_sent
    total_bandwidth = readable_size(network.bytes_recv + network.bytes_sent)

    # download_speed, upload_speed = await get_speed()  #–¥–ª—è —Å–ø–∏–¥—Ç–µ—Å—Ç
    users_in_wg = await how_users_in_db('users')
    users_in_tj = await how_users_in_db('trojan_users')
    total_users = users_in_tj + users_in_wg

    return """\
üéõ *CPU —è–¥—Ä–∞*: `{cpu_cores}`
üñ• *CPU –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è*: `{cpu_percent}%`
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìä *–í—Å–µ–≥–æ –ø–∞–º—è—Ç–∏*: `{total_memory}`
üìà *–ó–∞–Ω—è—Ç–æ –ø–∞–º—è—Ç–∏*: `{used_memory}`
üìâ *–°–≤–æ–±–æ–¥–Ω–æ –ø–∞–º—è—Ç–∏*: `{free_memory}`
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚¨áÔ∏è *–ó–∞–≥—Ä—É–∂–µ–Ω–æ*: `{down_bandwidth}`
‚¨ÜÔ∏è *–û—Ç–¥–∞–Ω–æ*: `{up_bandwidth}`
‚ÜïÔ∏è *–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫*: `{total_bandwidth}`
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π trojan*: `{users_trojan}`
üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π wireguard*: `{users_wireguard}`
üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: `{total_users}`
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚è´ *–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–¥–∞—á–∏*: `{up_speed}`
‚è¨ *–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏*: `{down_speed}`
""".format(
        cpu_cores=cpu_cores,
        cpu_percent=cpu_percent,
        total_memory=total_memory,
        used_memory=used_memory,
        free_memory=free_memory,
        total_bandwidth=total_bandwidth,
        up_bandwidth=readable_size(up_bandwidth),
        down_bandwidth=readable_size(down_bandwidth),
        users_trojan=users_in_tj,
        users_wireguard=users_in_wg,
        total_users=total_users,
        up_speed=readable_size(up_speed),
        down_speed=readable_size(down_speed)
    )
